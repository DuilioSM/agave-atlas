import { OpenAIEmbeddings } from '@langchain/openai';
import { PineconeStore } from '@langchain/pinecone';
import { Pinecone } from '@pinecone-database/pinecone';
import { ChatOpenAI } from '@langchain/openai';
import { createReactAgent } from '@langchain/langgraph/prebuilt';
import { DynamicStructuredTool } from '@langchain/core/tools';
import { HumanMessage } from '@langchain/core/messages';
import { z } from 'zod';

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { message, history = [] } = body;

    console.log('üìù Historial de chat recibido:', JSON.stringify(history, null, 2));

    // Inicializar Pinecone
    const pinecone = new Pinecone({
      apiKey: process.env.PINECONE_API_KEY!,
    });

    const indexName = process.env.PINECONE_INDEX || 'agave-atlas';
    const index = pinecone.Index(indexName);

    // Configurar embeddings (mismo modelo y dimensi√≥n que usamos para indexar)
    const embeddings = new OpenAIEmbeddings({
      openAIApiKey: process.env.OPENAI_KEY!,
      modelName: 'text-embedding-3-small',
      dimensions: 512,
    });

    // Crear vector store desde el √≠ndice existente
    const vectorStore = await PineconeStore.fromExistingIndex(embeddings, {
      pineconeIndex: index,
    });

    // Crear retriever
    const retriever = vectorStore.asRetriever({
      k: 4, // N√∫mero de documentos relevantes a recuperar
    });

    // Variable para almacenar las fuentes recuperadas
    let retrievedSources: Array<{ title: string; link: string }> = [];

    // Crear herramienta de b√∫squeda personalizada
    const searchTool = new DynamicStructuredTool({
      name: 'search_scientific_articles',
      description: 'Search the database of scientific articles about space research and biology. Use this tool when the user requests technical, scientific, or specific information about research, experiments, plants, space crops, or when they ask for an image related to a topic. DO NOT use this tool for greetings, general questions, or casual conversation.',
      schema: z.object({
        query: z.string().describe('The search query for finding relevant scientific articles'),
      }),
      func: async ({ query }) => {
        const docs = await retriever.invoke(query);

        // Guardar las fuentes con metadata
        retrievedSources = docs.map(doc => ({
          title: doc.metadata.title || 'Sin t√≠tulo',
          link: doc.metadata.link || doc.metadata.source || '#',
        }));

        // Eliminar duplicados
        retrievedSources = retrievedSources.filter((source, index, self) =>
          index === self.findIndex((s) => s.link === source.link)
        );

        // Formatear el contenido para el LLM, incluyendo metadata
        const formattedDocs = docs.map(doc => {
            const title = doc.metadata.title || 'Sin t√≠tulo';
            const link = doc.metadata.link || doc.metadata.source || '#';
            return `Art√≠culo: \"${title}\"\nURL: ${link}\nContenido: ${doc.pageContent}`;
        });

        // Retornar el contenido para que el LLM lo use
        return formattedDocs.join('\n\n---\n\n');
      },
    });

    // Configurar LLM
    const llm = new ChatOpenAI({
      openAIApiKey: process.env.OPENAI_KEY!,
      modelName: 'gpt-4o',
      temperature: 0.7,
    });

    // Crear agente con la herramienta
    const agent = createReactAgent({
      llm,
      tools: [searchTool],
    });

    // Formatear historial
    const formattedHistory = history.map((msg: { role: string; content: string }) => ({
      role: msg.role,
      content: msg.content,
    }));

    // Ejecutar agente
    const result = await agent.invoke({
      messages: [
        {
          role: 'system',
          content: `**Identidad del Agente:**
Eres *Stella*, la asistente virtual, de una plataforma educativa y cient√≠fica dedicada a la biolog√≠ay el espacio. Tu prop√≥sito es ayudar a estudiantes, investigadores y entusiastas del espacio y la biolog√≠a a navegar entre los contenidos del sitio : art√≠culos, secciones de datos, introducci√≥n, metodolog√≠a, resultados y conclusiones. 

**Misi√≥n:**
Tu misi√≥n es brindar informaci√≥n cient√≠fica de manera amable y clara, guiando a los usuarios para que comprendan mejor los conceptos, y motivarlos a consultar el art√≠culo completo en la secci√≥n de *Fuentes* al final de cada p√°gina.

**Estilo de Comunicaci√≥n:**
- Tono: Amable, educativo y accesible.
- Lenguaje: Cient√≠fico pero claro (evita tecnicismos innecesarios).
- Cierre: Siempre cierra tus mensajes invitando a explorar m√°s o a formular otra pregunta.

**Estructura de la Conversaci√≥n:**
Debes mantener la siguiente estructura en todas tus respuestas:
1.  **Saludo breve y c√°lido.** (ej: "¬°Hola!")
2.  **Respuesta clara y ordenada** a la duda del usuario.
3.  **Menci√≥n de la ubicaci√≥n:** Indica en qu√© parte del art√≠culo o del sitio puede encontrar m√°s informaci√≥n (ej: ‚ÄúPuedes revisar m√°s sobre esto en la secci√≥n Introducci√≥n del art√≠culo‚Äù). Si el usuario no especifica, sugiere leer la secci√≥n *Introducci√≥n* para contextualizar.
4.  **Invitaci√≥n final:** Cierra con una invitaci√≥n amable a visitar el link del art√≠culo o a seguir preguntando. Incluye una de estas frases: "Puedes consultar el art√≠culo completo y sus fuentes al final de la p√°gina üîó" o "Encuentra m√°s detalles en el enlace que aparece en el apartado de Fuentes üëá". Termina SIEMPRE con una pregunta o invitaci√≥n a seguir explorando (ej: "¬øTe gustar√≠a que te indique d√≥nde est√° la Introduuci√≥n o los Resultados? üòä").

**Reglas Importantes:**
- No repitas informaci√≥n que ya se muestra en pantalla.
- Si el usuario pide informaci√≥n detallada de un art√≠culo, indica en qu√© parte puede encontrarla (*Introducci√≥n*, *Resultados*, *Discusi√≥n*, etc.).
- No sugieras buscar en otros medios. Basa tus respuestas √∫nicamente en la informaci√≥n proporcionada por la herramienta de b√∫squeda.

**Instrucciones para im√°genes (¬°MUY IMPORTANTE!):**
Si un usuario pide una imagen, responde amablemente que no puedes mostrarlas, pero ind√≠cale en qu√© parte del art√≠culo puede encontrarla, y proporciona el enlace. Por ejemplo: '¬°Hola! ‚ú® No puedo mostrarte im√°genes directamente, pero puedes encontrar una excelente ilustraci√≥n sobre [tema] en la secci√≥n de Resultados del art√≠culo. Encuentra m√°s detalles en el enlace que aparece en el apartado de Fuentes üëá. ¬øHay algo m√°s en lo que pueda ayudarte?'`
        },
        ...formattedHistory,
        new HumanMessage(message)
      ],
    });

    // Extraer la respuesta final
    const messages = result.messages;
    const lastMessage = messages[messages.length - 1];
    const answer = typeof lastMessage.content === 'string'
      ? lastMessage.content
      : JSON.stringify(lastMessage.content);

    // Las fuentes ya est√°n en retrievedSources gracias a nuestra herramienta personalizada
    return Response.json({
      message: answer,
      sources: retrievedSources,
    });
  } catch (error) {
    console.error("Error:", error);
    return Response.json(
      { message: "Error connecting to assistant" },
      { status: 500 }
    );
  }
}