generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @map("provider_account_id") @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String? @db.VarChar(255)
  scope             String? @db.VarChar(255)
  id_token          String?
  session_state     String? @db.VarChar(255)
  userId            String  @map("user_id") @db.Uuid
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @unique(map: "sessions_session_token_idx") @map("session_token") @db.VarChar(255)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?   @db.VarChar(255)
  email         String?   @unique(map: "users_email_idx") @db.VarChar(255)
  emailVerified DateTime? @map("email_verified") @db.Timestamptz(6)
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz(6)

  @@id([identifier, token])
  @@map("verification_tokens")
}
